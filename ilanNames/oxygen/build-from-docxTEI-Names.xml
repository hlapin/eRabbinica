<?xml version="1.0" encoding="utf-8"?>
<project basedir="." default="dist" name="docxtei">
  <!-- basedir points to location of build file? -->
  
  <!-- have moved the licensing info to the end to make my comments more visible -->
  
  <!--
 Convert docx files to TEI documents.
 -->
  
  <!-- these properties point to default tei docx transformations, since I am not modfying these, only subsequent adding additional layers-->
  <property name="docxtoTEI" value="${defaultFrameworks}/tei/xml/tei/stylesheet/profiles/tei/docx/from.xsl"/>
  <property name ="teixslDir" value="${defaultFrameworks}/tei/xml/tei/stylesheet/common"/>
  <import file="${teixslDir}/teianttasks.xml"/>
  <!-- error here is a bug (in validation?); ant finds the teiantasks.xml file. -->
  
  <!-- cleanup flags an error, but when I run the transformation, a cleanup operation  takes place, but if it ain't broke don't fix it -->
  <target name="dist" depends="convert,mediadir.check,embeddingdir.check,chartdir.check,picturecopy,embeddingcopy,chartcopy,cleanup"/>
  
  <target name="convert">
    <echo>	 using ${docxtoTEI}</echo>
    <unzip src="${inputFile}" dest="${outputTempDir}"/>
    <xslt force="yes" style="${docxtoTEI}" in="${outputTempDir}/word/document.xml" out="${outputFile}.tmp">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="$catalogfile"/>
        </catalogpath>
      </xmlcatalog>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${oxygenlib}/saxon9ee.jar"/>
      <param name="word-directory" expression="file:///${outputTempDir}"/>
      <param name="inputDir" expression="${inputDir}"/>
      <param name="mediaDir" expression="word/media"/>
    </xslt>
    
    <!-- begin second transformation -->  
    <!-- I decided not to chain a third transformation (instead postponing until after all files are processed) -->
    <!-- should in principle be clonable repeatedly -->
    <!-- ${namesDir} refers to the location where I have project files, specified in parameters for transformation. -->
    <!-- IN THIS CASE I could have (perhap should have?) just pointed to  ../oxygen/xsl/Ilan-tei-p5-listNames.xsl-->
    <!--  -->
    <echo>  applying second xslt trasformation</echo>  
    <echo>  using ${namesDir}/oxygen/xsl/Ilan-tei-p5-listNames.xsl</echo>
    <echo>  mode is: ${mode}</echo>
    <xslt force="yes" style="${namesDir}/oxygen/xsl/Ilan-tei-p5-listNames.xsl" in="${outputFile}.tmp" out="${outputFile}">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${oxygenlib}/saxon9ee.jar"/>
      <param name="mode"  expression="${mode}">
        <!-- param passes it to the xslt style sheet as a parameter. -->
        <!-- value is provided by Oxygen's transformation scenario parameters -->
      </param>
    </xslt>
    <delete file="${outputFile}.tmp"></delete>      
  </target>
  <target name="mediadir.check">
    <condition property="mediadir.exists">
      <available file="${outputTempDir}/word/media" type="dir"/>
    </condition>
  </target>
  <target name="picturecopy" if="${mediadir.exists}">
    <mkdir dir="${outputDir}/media"/>
    <move todir="${outputDir}/media" overwrite="true">
      <fileset dir="${outputTempDir}/word/media"/>
    </move>
  </target>
  <target name="embeddingdir.check">
    <condition property="embeddingdir.exists">
      <available file="${outputTempDir}/word/embeddings" type="dir"/>
    </condition>
  </target>
  <target name="embeddingcopy" if="${embeddingdir.exists}">
    <mkdir dir="${outputDir}/embeddings"/>
    <move todir="${outputDir}/embeddings" overwrite="true">
      <fileset dir="${outputTempDir}/word/embeddings"/>
    </move>
  </target>
  <target name="chartdir.check">
    <condition property="chartdir.exists">
      <available file="${outputTempDir}/word/charts" type="dir"/>
    </condition>
  </target>
  <target name="chartcopy" if="${chartdir.exists}">
    <mkdir dir="${outputDir}/charts"/>
    <move todir="${outputDir}/charts" overwrite="true">
      <fileset dir="${outputTempDir}/word/charts"/>
    </move>
  </target>
  <!--
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	
        Id: $Id$
        Copyright: 2011, TEI Consortium<
-->
</project>
